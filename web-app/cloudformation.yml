AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template for Drone Object Detection project 

Parameters:
  Env:
    Description: Environment (dev/prod)
    Type: String
    AllowedPattern: '[a-zA-Z0-9]*'
    MinLength: '1'
    MaxLength: '10'
    ConstraintDescription: must contain only alphanumberic characters
  ServiceName:
    Description: Name of the project
    Type: String
  Region:
    Type: String
    Description: "The AWS region"
  ImageTag:
    Type: String
    Description: "The docker image tag to use"

Resources:   
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API Gateway
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Sub "${ServiceName}-api-${Env}"

  ApiGatewayProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "{proxy+}"
  
  ApiGatewayProxyMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ApiKeyRequired: true
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayProxyResource
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt LambdaAPI.Arn

  ApiGatewayProxyMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ApiKeyRequired: true
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayProxyResource
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt LambdaAPI.Arn
  
  ApiGatewayProxyMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayProxyResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayProxyMethodPost
      - ApiGatewayProxyMethodGet
      - ApiGatewayProxyMethodOptions
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Env
  
  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaAPI.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*

  LambdaAPI:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-lambda-${Env}"
      Role: !GetAtt LambdaRole.Arn
      PackageType: Image
      Code:
        ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.${Region}.amazonaws.com/${ServiceName}:${ImageTag}"
      ImageConfig:
        Command: ["app.handler"]
        EntryPoint: ["/lambda-entrypoint.sh"]
        WorkingDirectory: "/var/task/"
      Environment:
        Variables:
          S3_BUCKET: !Ref S3BucketData
          DYNAMO_DB_TABLE: !Ref TripDBTable

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: !Sub "${ServiceName}-role-${Env}"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/${ServiceName}-lambda-policy-${Env}"
  
  S3BucketData:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ServiceName}-data-${Env}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  
  TripDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ServiceName}-trips-${Env}
      AttributeDefinitions:
        - 
          AttributeName: "VehicleId"
          AttributeType: "S"
        - 
          AttributeName: "TripId"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "VehicleId"
          KeyType: "HASH"
        - 
          AttributeName: "TripId"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST


Outputs:
  ApiGatewayInvokeURL:
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Env}
  

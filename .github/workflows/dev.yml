name: Deploy to dev

on:
  push:
    branches: [dev]
    paths:
      - 'web-app/**'
  pull_request:
    branches: [dev]
    paths:
      - 'web-app/**'

env:
  SERVICE_NAME: tia-drone-detection
  AWS_ACCOUNT: 568480506324
  AWS_REGION: eu-west-1
  PYTHON_VERSION: 3.8


jobs:
  package-web-app:
    if: github.event_name == 'push'
    name: Package Docker image WebApp
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - 
        name: Configure Dev AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}
          role-to-assume: ci-deployer-role-dev
          role-duration-seconds: 1200
          role-session-name: GithubBuildDev
      - 
        name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.SERVICE_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd web-app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          

  deploy-webapp-dev:
    if: github.event_name == 'push'
    name: Deploy WebApp to dev
    runs-on: ubuntu-latest
    needs: package-web-app
    steps:
      - uses: actions/checkout@v3
      - name: Configure Dev AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}
          role-to-assume: ci-deployer-role-dev
          role-duration-seconds: 1200
          role-session-name: GithubDeployDev
      - name: Deploy Stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{env.SERVICE_NAME}}-dev
          template: web-app/cloudformation.yml
          no-fail-on-empty-changeset: "1"
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: >-
            Env=dev,
            ServiceName=${{env.SERVICE_NAME}},
            Account=${{env.AWS_ACCOUNT}},
            Region=${{env.AWS_REGION}},
            ImageTag=${{github.sha}}

